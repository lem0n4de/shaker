name: CMake

on: push

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Clang
      if: ${{ !contains(matrix.os, 'macos') }}
      uses: egor-tensin/setup-clang@v1
      with:
        version: latest
        platform: x64
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '6.3.0'
        modules: 'qtpositioning qtwebchannel qtwebengine'
        aqtversion: '==2.1.*'
        
    - name: Configure CMake for Unix
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      env:
        CMAKE_PREFIX_PATH: ${{ env.Qt6_DIR }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++

    - name: Configure CMake for Windows
      if: matrix.os == 'windows-latest'
      env:
        CMAKE_PREFIX_PATH: ${{ env.Qt6_DIR }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++

    - name: Build for Linux
      if: matrix.os == 'ubuntu-latest' || contains(matrix.os, 'macos')
      env:
        CMAKE_PREFIX_PATH: ${{ env.Qt6_DIR }}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target all
      
    - name: Build for Windows
      env:
        CMAKE_PREFIX_PATH: ${{ env.Qt6_DIR }}
      # Build your program with the given configuration
      if: matrix.os == 'windows-latest'
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target ALL_BUILD
      
    - name: Create Release for Linux
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
      with:
        files: ${{github.workspace}}/build/shaker
        name: Release-${{ github.ref_name }}

    - name: Windeployqt for windows
      if: matrix.os == 'windows-latest'
      run: ${{ env.Qt6_DIR }}/bin/windeployqt.exe "${{ github.workspace }}/build/Release/shaker.exe"

    - name: macdeployqt for mac
      if: contains(matrix.os, 'macos')
      working-directory: ${{github.workspace}}/build/
      run: ${{ env.Qt6_DIR }}/bin/macdeployqt shaker.app -dmg -verbose=3

        #    - name: zip mac bundle
        #if: matrix.os == 'macos-latest'
        #run: 7z a -tzip -mx9 -r shaker.app.zip ${{ github.workspace }}/build/shaker.app
        #| ls -lhR ${{ github.workspace }}/build

    - name: Create release for mac
      if: matrix.os == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{github.workspace}}/build/shaker.dmg
        name: mac-release-${{ github.ref_name }}

    - uses: papeloto/action-zip@v1
      if: matrix.os == 'windows-latest'
      with:
        files: build/Release
        dest: shaker.zip

    - name: Create Release for Windows
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-latest'
      with:
        files: ${{github.workspace}}/shaker.zip
        name: v${{ github.ref_name }}

      
